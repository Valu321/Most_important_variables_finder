import streamlit as st
import pandas as pd
import numpy as np
from pycaret.classification import *
from pycaret.regression import *
import plotly.express as px
import plotly.graph_objects as go
from sklearn.model_selection import train_test_split
import openai
import os
from dotenv import load_dotenv
import warnings
warnings.filterwarnings('ignore')

# Za≈Çaduj zmienne ≈õrodowiskowe
load_dotenv()

# Konfiguracja strony
st.set_page_config(
    page_title="Analiza Najwa≈ºniejszych Cech",
    page_icon="üìä",
    layout="wide"
)

# Tytu≈Ç aplikacji
st.title("üìä Aplikacja do znajdowania najwa≈ºniejszych cech w zbiorze danych")
st.markdown("---")

# Funkcja do okre≈õlenia typu problemu
def determine_problem_type(data, target_column):
    """Okre≈õla czy problem to klasyfikacja czy regresja"""
    target_data = data[target_column]
    
    # Sprawd≈∫ czy kolumna docelowa to liczby ca≈Çkowite z ma≈ÇƒÖ liczbƒÖ unikalnych warto≈õci
    if target_data.dtype in ['int64', 'int32', 'object']:
        unique_values = target_data.nunique()
        total_values = len(target_data)
        
        # Je≈õli mniej ni≈º 20% unikalnych warto≈õci, traktuj jako klasyfikacjƒô
        if unique_values / total_values < 0.2:
            return "klasyfikacja"
    
    # Sprawd≈∫ czy mo≈ºna przekonwertowaƒá na liczby
    try:
        numeric_data = pd.to_numeric(target_data, errors='coerce')
        if numeric_data.isna().sum() / len(numeric_data) < 0.1:  # Mniej ni≈º 10% warto≈õci nie-numerycznych
            return "regresja"
    except:
        pass
    
    return "klasyfikacja"  # Domy≈õlnie klasyfikacja

# Funkcja do analizy wa≈ºno≈õci cech
def analyze_feature_importance(data, target_column, problem_type):
    """Analizuje wa≈ºno≈õƒá cech u≈ºywajƒÖc PyCaret"""
    
    # Przygotowanie danych
    feature_columns = [col for col in data.columns if col != target_column]
    
    # Usu≈Ñ kolumny z du≈ºƒÖ liczbƒÖ warto≈õci brakujƒÖcych
    data_clean = data.dropna(thresh=len(data) * 0.7, axis=1)
    
    # Usu≈Ñ wiersze z warto≈õciami brakujƒÖcymi
    data_clean = data_clean.dropna()
    
    if len(data_clean) < 10:
        return None, "Za ma≈Ço danych po czyszczeniu"
    
    try:
        if problem_type == "klasyfikacja":
            # Konfiguracja PyCaret dla klasyfikacji
            clf = setup(
                data_clean,
                target=target_column,
                session_id=123
            )
            
            # Por√≥wnanie modeli
            best_model = compare_models(include=['rf', 'xgboost', 'lightgbm'], verbose=False)
            
            # Analiza wa≈ºno≈õci cech
            importance_df = pd.DataFrame({
                'Feature': feature_columns,
                'Importance': best_model.feature_importances_ if hasattr(best_model, 'feature_importances_') else [0] * len(feature_columns)
            })
            
        else:  # regresja
            # Konfiguracja PyCaret dla regresji
            reg = setup(
                data_clean,
                target=target_column,
                session_id=123
            )
            
            # Por√≥wnanie modeli
            best_model = compare_models(include=['rf', 'xgboost', 'lightgbm'], verbose=False)
            
            # Analiza wa≈ºno≈õci cech
            importance_df = pd.DataFrame({
                'Feature': feature_columns,
                'Importance': best_model.feature_importances_ if hasattr(best_model, 'feature_importances_') else [0] * len(feature_columns)
            })
        
        # Sortuj wed≈Çug wa≈ºno≈õci
        importance_df = importance_df.sort_values('Importance', ascending=False)
        
        return importance_df, best_model
        
    except Exception as e:
        return None, f"B≈ÇƒÖd podczas analizy: {str(e)}"

# Funkcja do generowania opisu przez OpenAI
def generate_description_with_gpt(importance_df, problem_type, target_column, data_info):
    """Generuje opis s≈Çowny wynik√≥w u≈ºywajƒÖc OpenAI API"""
    
    if importance_df is None or len(importance_df) == 0:
        return "Nie uda≈Ço siƒô wygenerowaƒá opisu z powodu b≈Çƒôd√≥w w analizie."
    
    # Sprawd≈∫ czy klucz API jest dostƒôpny
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        return """
## ‚ö†Ô∏è Brak klucza API

Aby wygenerowaƒá opis przez ChatGPT, dodaj klucz OpenAI API do pliku `.env`:

```
OPENAI_API_KEY=your_api_key_here
```

**Tymczasowy opis:**
Najwa≈ºniejsze cechy zosta≈Çy zidentyfikowane w tabeli powy≈ºej. 
Najwy≈ºsza wa≈ºno≈õƒá: **{0}** ({1:.1f}%).
        """.format(
            importance_df.iloc[0]['Feature'],
            (importance_df.iloc[0]['Importance'] / importance_df['Importance'].sum()) * 100
        )
    
    try:
        # Konfiguracja OpenAI - nowy interfejs
        from openai import OpenAI
        client = OpenAI(api_key=api_key)
        
        # Przygotuj dane dla GPT
        top_features = importance_df.head(10)
        features_text = "\n".join([
            f"{i+1}. {row['Feature']}: {row['Importance']:.4f}" 
            for i, (_, row) in enumerate(top_features.iterrows())
        ])
        
        # Prompt dla GPT
        prompt = f"""
Jeste≈õ ekspertem w analizie danych i machine learning. Przeanalizuj wyniki analizy wa≈ºno≈õci cech i wygeneruj profesjonalny opis.

DANE:
- Typ problemu: {problem_type}
- Kolumna docelowa: {target_column}
- Liczba cech: {len(importance_df)}
- Informacje o danych: {data_info}

NAJWA≈ªNIEJSZE CECHY:
{features_text}

Wygeneruj opis zawierajƒÖcy:
1. Podsumowanie analizy
2. Interpretacjƒô najwa≈ºniejszych cech
3. Praktyczne wnioski biznesowe
4. Konkretne rekomendacje

Odpowiedz w jƒôzyku polskim, w formacie Markdown, profesjonalnie ale przystƒôpnie.
"""
        
        # Wywo≈Çanie API - nowy interfejs
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Jeste≈õ ekspertem w analizie danych i machine learning. Odpowiadaj profesjonalnie w jƒôzyku polskim."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1000,
            temperature=0.7
        )
        
        return f"## ü§ñ Analiza wygenerowana przez ChatGPT\n\n{response.choices[0].message.content}"
        
    except Exception as e:
        return f"""
## ‚ùå B≈ÇƒÖd podczas generowania opisu

Nie uda≈Ço siƒô wygenerowaƒá opisu przez ChatGPT: {str(e)}

**Podstawowe informacje:**
- Typ problemu: {problem_type}
- Kolumna docelowa: {target_column}
- Najwa≈ºniejsza cecha: {importance_df.iloc[0]['Feature']}
- Liczba analizowanych cech: {len(importance_df)}
        """

# G≈Ç√≥wna aplikacja
def main():
    # Sidebar dla wczytywania pliku
    st.sidebar.header("üìÅ Wczytaj dane")
    
    uploaded_file = st.sidebar.file_uploader(
        "Wybierz plik CSV",
        type=['csv'],
        help="Wczytaj plik CSV z danymi do analizy"
    )
    
    if uploaded_file is not None:
        try:
            # Wczytanie danych
            data = pd.read_csv(uploaded_file)
            
            st.sidebar.success(f"‚úÖ Wczytano {len(data)} wierszy i {len(data.columns)} kolumn")
            
            # Wy≈õwietlenie podstawowych informacji o danych
            st.header("üìä PodglƒÖd danych")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("Pierwsze 5 wierszy")
                st.dataframe(data.head())
            
            with col2:
                st.subheader("Podstawowe statystyki")
                st.dataframe(data.describe())
            
            # Wyb√≥r kolumny docelowej
            st.header("üéØ Wyb√≥r kolumny docelowej")
            
            target_column = st.selectbox(
                "Wybierz kolumnƒô docelowƒÖ:",
                options=data.columns,
                help="Wybierz kolumnƒô, dla kt√≥rej chcesz znale≈∫ƒá najwa≈ºniejsze cechy"
            )
            
            if st.button("üîç Rozpocznij analizƒô", type="primary"):
                with st.spinner("Analizujƒô dane..."):
                    # Okre≈õlenie typu problemu
                    problem_type = determine_problem_type(data, target_column)
                    
                    st.header(f"ü§ñ Typ problemu: {problem_type.title()}")
                    st.info(f"System automatycznie rozpozna≈Ç, ≈ºe to problem **{problem_type}**")
                    
                    # Analiza wa≈ºno≈õci cech
                    importance_df, model = analyze_feature_importance(data, target_column, problem_type)
                    
                    if importance_df is not None:
                        st.header("üìà Najwa≈ºniejsze cechy")
                        
                        # Wykres wa≈ºno≈õci cech
                        fig = px.bar(
                            importance_df.head(10),
                            x='Wa≈ºno≈õƒá',
                            y='Cecha',
                            orientation='h',
                            title="Top 10 najwa≈ºniejszych cech",
                            color='wa≈ºno≈õƒá',
                            color_continuous_scale='viridis'
                        )
                        fig.update_layout(height=500)
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Tabela z wynikami
                        st.subheader("üìã Szczeg√≥≈Çowe wyniki")
                        st.dataframe(importance_df, use_container_width=True)
                        
                        # Generowanie opisu przez ChatGPT
                        st.header("üìù Opis wynik√≥w")
                        
                        # Przygotuj informacje o danych
                        data_info = f"Zbi√≥r zawiera {len(data)} wierszy i {len(data.columns)} kolumn. Typ problemu: {problem_type}."
                        
                        with st.spinner("ü§ñ Generujƒô opis przez ChatGPT..."):
                            description = generate_description_with_gpt(importance_df, problem_type, target_column, data_info)
                            st.markdown(description)
                        
                    else:
                        st.error(f"‚ùå {model}")
                        
        except Exception as e:
            st.error(f"‚ùå B≈ÇƒÖd podczas wczytywania pliku: {str(e)}")
    
    else:
        # Instrukcje dla u≈ºytkownika
        st.info("üëÜ Wczytaj plik CSV z danymi, aby rozpoczƒÖƒá analizƒô")
        
        st.markdown("""
        ## üöÄ Jak u≈ºywaƒá aplikacji:
        
        1. **Wczytaj dane** - u≈ºyj panelu po lewej stronie, aby wczytaƒá plik CSV
        2. **Wybierz kolumnƒô docelowƒÖ** - okre≈õl, kt√≥rƒÖ kolumnƒô chcesz przewidywaƒá
        3. **Rozpocznij analizƒô** - aplikacja automatycznie:
           - Okre≈õli typ problemu (klasyfikacja/regresja)
           - Zbuduje najlepszy model
           - Wy≈õwietli najwa≈ºniejsze cechy
           - Wygeneruje opis wynik√≥w przez ChatGPT ü§ñ
        
        ## üìã Wymagania dla danych:
        - Format CSV
        - Co najmniej 10 wierszy danych
        - Kolumny numeryczne lub kategoryczne
        - Maksymalnie 70% warto≈õci brakujƒÖcych w kolumnach
        
        ## üîë Konfiguracja ChatGPT:
        Aby korzystaƒá z automatycznego generowania opis√≥w, dodaj klucz OpenAI API do pliku `.env`:
        ```
        OPENAI_API_KEY=your_api_key_here
        ```
        """)

if __name__ == "__main__":
    main()
